<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Character Match - Find Your Match</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.2.0/crypto-js.min.js"></script>

    <script src="/utils/network-helper.js"></script>
    <script src="/utils/xss.js"></script>
</head>
<body class="bg-gradient-to-br from-purple-50 to-pink-100 min-h-screen">
    <!-- Navigation -->
    <nav class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <div class="flex items-center">
                    <h1 class="text-xl font-bold text-gray-800">Character Match</h1>
                </div>
                <a href="#" id="logoutBtn" class="text-purple-600 hover:text-purple-800 transition duration-200">Logout</a>
            </div>
        </div>
    </nav>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Character Match Form -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-xl shadow-lg p-8">
                    <div class="text-center mb-8">
                        <h2 class="text-3xl font-bold text-gray-800 mb-2">Character Match Calculator</h2>
                        <p class="text-gray-600">Find out how many characters from your first input appear in the second input</p>
                    </div>

                    <!-- Match Form -->
                    <form id="matchForm" class="space-y-6">
                        <!-- Input 1 -->
                        <div>
                            <label for="input1" class="block text-sm font-medium text-gray-700 mb-2">
                                First Input
                                <span class="text-purple-600">*</span>
                            </label>
                            <input 
                                type="text" 
                                id="input1" 
                                name="input1" 
                                required
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none transition duration-200"
                                placeholder="e.g., ABBCD"
                            >
                            <p class="text-xs text-gray-500 mt-1">Enter any text or characters</p>
                        </div>

                        <!-- Input 2 -->
                        <div>
                            <label for="input2" class="block text-sm font-medium text-gray-700 mb-2">
                                Second Input
                                <span class="text-purple-600">*</span>
                            </label>
                            <input 
                                type="text" 
                                id="input2" 
                                name="input2" 
                                required
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none transition duration-200"
                                placeholder="e.g., Gallant Duck"
                            >
                            <p class="text-xs text-gray-500 mt-1">Enter text to compare against</p>
                        </div>

                        <!-- Matching Mode -->
                        <div class="">
                            <label class="block text-sm font-medium text-gray-700 mb-3">Matching Mode</label>
                            <div class="flex items-center space-x-6">
                                <label class="flex items-center cursor-pointer">
                                    <input 
                                        type="radio" 
                                        name="caseSensitive" 
                                        value="false" 
                                        checked
                                        class="w-4 h-4 text-purple-600 border-gray-300 focus:ring-purple-500"
                                    >
                                    <span class="ml-2 text-sm text-gray-700">
                                        <strong>Case-Insensitive</strong> (Recommended)
                                        <br><span class="text-xs text-gray-500">A = a, treats all letters equally</span>
                                    </span>
                                </label>

                                <label class="flex items-center cursor-pointer">
                                    <input 
                                        type="radio" 
                                        name="caseSensitive" 
                                        value="true"
                                        class="w-4 h-4 text-purple-600 border-gray-300 focus:ring-purple-500"
                                    >
                                    <span class="ml-2 text-sm text-gray-700">
                                        <strong>Case-Sensitive</strong>
                                        <br><span class="text-xs text-gray-500">A â‰  a, exact character matching</span>
                                    </span>
                                </label>
                            </div>
                        </div>


                        <!-- Calculate Button -->
                        <button 
                            type="submit"
                            class="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-4 px-6 rounded-lg hover:from-purple-700 hover:to-pink-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition duration-200 font-medium text-lg"
                        >
                            Calculate Match Percentage
                        </button>
                    </form>

                    <!-- Result Display -->
                    <div id="resultSection" class="mt-8 hidden">
                        <div class="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6">
                            <h3 class="text-lg font-semibold text-gray-800 mb-4">Match Result</h3>
                            <div id="resultContent" class="space-y-3">
                                <!-- Result will be populated here -->
                            </div>
                        </div>
                    </div>

                    <!-- Loading State -->
                    <div id="loadingState" class="mt-8 hidden">
                        <div class="bg-gray-50 border border-gray-200 rounded-lg p-6 text-center">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-4"></div>
                            <p class="text-gray-600">Calculating match percentage...</p>
                        </div>
                    </div>

                    <!-- Error Display -->
                    <div id="errorSection" class="mt-8 hidden">
                        <div class="bg-red-50 border border-red-200 rounded-lg p-6">
                            <h3 class="text-lg font-semibold text-red-800 mb-2">Error</h3>
                            <p id="errorMessage" class="text-red-600"></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- History Sidebar -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <div class="flex items-center justify-between mb-6">
                        <h3 class="text-xl font-bold text-gray-800">Recent Matches</h3>
                        <button onclick="refreshHistory()" class="text-purple-600 hover:text-purple-800 transition duration-200">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                        </button>
                    </div>

                    <!-- History List -->
                    <div id="historyList" class="space-y-4 max-h-96 overflow-y-auto">
                        <!-- Sample history items - will be populated dynamically -->
                    </div>

                    <div id="paginationControls" class="flex justify-between items-center mt-4 hidden">
                        <button id="prevPage" class="px-3 py-1 bg-gray-200 rounded disabled:opacity-50">Prev</button>
                        <span id="pageInfo" class="text-sm text-gray-600"></span>
                        <button id="nextPage" class="px-3 py-1 bg-gray-200 rounded disabled:opacity-50">Next</button>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div id="editModal" class="fixed inset-0 bg-black bg-opacity-30 hidden items-center justify-center">
        <div class="bg-white p-6 rounded-lg w-full max-w-md">
            <h3 class="text-lg font-bold mb-4">Edit History</h3>
            <input type="hidden" id="editId">
            <div class="mb-4">
                <label class="block text-sm font-medium mb-1">Input 1</label>
                <input type="text" id="editInput1" class="w-full border p-2 rounded">
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium mb-1">Input 2</label>
                <input type="text" id="editInput2" class="w-full border p-2 rounded">
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium mb-1">Matching Mode</label>
                <div class="flex items-center space-x-4">
                    <label class="flex items-center cursor-pointer">
                        <input type="radio" name="editCaseSensitive" value="false" class="w-4 h-4 text-purple-600 border-gray-300 focus:ring-purple-500">
                        <span class="ml-2 text-sm text-gray-700">Case-Insensitive</span>
                    </label>
                    <label class="flex items-center cursor-pointer">
                        <input type="radio" name="editCaseSensitive" value="true" class="w-4 h-4 text-purple-600 border-gray-300 focus:ring-purple-500">
                        <span class="ml-2 text-sm text-gray-700">Case-Sensitive</span>
                    </label>
                </div>
            </div>

            <div class="flex justify-end gap-2">
                <button onclick="closeEditModal()" class="px-4 py-2 bg-gray-200 rounded">Cancel</button>
                <button onclick="updateHistory()" class="px-4 py-2 bg-purple-600 text-white rounded">Save</button>
            </div>
        </div>
    </div>


    <script>
        let currentPage = 1;
        const limit = 5;
        let totalPages = 1;

        // Form submission handler
        document.getElementById('matchForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const input1 = document.getElementById('input1').value.trim();
            const input2 = document.getElementById('input2').value.trim();
            const caseSensitive = document.querySelector('input[name="caseSensitive"]:checked').value === 'true';

            if (!input1 || !input2) {
                showError('Please fill in both input fields');
                return;
            }

            showLoading(true);
            hideResult();
            hideError();

            try {
                const res = await apiPost('/api/v1/histories/check', { input1, input2, caseSensitive });
                showResult(res);
                refreshHistory();
            } catch (err) {
                console.error(err);
                showError(err.message || 'An error occurred while calculating');
            } finally {
                showLoading(false);
            }
        });

        document.getElementById('logoutBtn').addEventListener('click', async function (e) {
            e.preventDefault(); // agar tidak reload halaman

            try {
                const res = await apiPost('/api/v1/users/logout', {});

                if (res.success) {
                    window.location.href = '/login';
                } else {
                    alert(res.message || 'Logout gagal');
                }
            } catch (err) {
                console.error(err);
                alert('Terjadi error saat logout');
            }
        });


        function showResult(data) {
            const resultSection = document.getElementById('resultSection');
            const resultContent = document.getElementById('resultContent');

            const modeText = data.data.caseSensitive ? 'Case-Sensitive' : 'Case-Insensitive';
            const modeColor = data.data.caseSensitive ? 'text-orange-600' : 'text-green-600';
            
            resultContent.innerHTML = `
                <div class="text-center">
                    <div class="text-4xl font-bold text-purple-600 mb-2">${data.data.percentage}%</div>
                    <div class="mb-2">
                        <span class="text-sm ${modeColor} font-medium px-2 py-1 bg-gray-100 rounded-full">
                            ${modeText} Mode
                        </span>
                    </div>
                    <p class="text-gray-700 mb-4">${data.data.matchedChars} out of ${data.data.totalChars} characters match</p>
                </div>
                <div class="grid grid-cols-2 gap-4 text-sm">
                    <div>
                        <strong class="text-gray-700">Input 1:</strong>
                        <p class="text-gray-600 break-all">"${escapeHTML(data.data.input1)}"</p>
                    </div>
                    <div>
                        <strong class="text-gray-700">Input 2:</strong>
                        <p class="text-gray-600 break-all">"${escapeHTML(data.data.input2)}"</p>
                    </div>
                </div>
                ${data.data.matchedCharsList ? `
                    <div class="mt-4">
                        <strong class="text-gray-700">Matched Characters:</strong>
                        <p class="text-gray-600">${data.data.matchedCharsList.join(', ')}</p>
                    </div>
                ` : ''}
            `;
            
            resultSection.classList.remove('hidden');
        }

        function showError(message) {
            const errorSection = document.getElementById('errorSection');
            const errorMessage = document.getElementById('errorMessage');
            
            errorMessage.textContent = message;
            errorSection.classList.remove('hidden');
        }

        function hideError() {
            document.getElementById('errorSection').classList.add('hidden');
        }

        function hideResult() {
            document.getElementById('resultSection').classList.add('hidden');
        }

        function showLoading(show) {
            const loadingState = document.getElementById('loadingState');
            if (show) {
                loadingState.classList.remove('hidden');
            } else {
                loadingState.classList.add('hidden');
            }
        }

        function openEditModal(id, input1, input2, caseSensitive = false) {
            document.getElementById('editId').value = id;
            document.getElementById('editInput1').value = input1;
            document.getElementById('editInput2').value = input2;

            // Set radio sesuai caseSensitive
            const radios = document.getElementsByName('editCaseSensitive');
            radios.forEach(radio => {
                radio.checked = (radio.value === String(caseSensitive));
            });

            document.getElementById('editModal').classList.remove('hidden');
            document.getElementById('editModal').classList.add('flex');
        }

        function closeEditModal() {
            document.getElementById('editModal').classList.add('hidden');
            document.getElementById('editModal').classList.remove('flex');
        }

        async function updateHistory() {
            const id = document.getElementById('editId').value;
            const input1 = document.getElementById('editInput1').value.trim();
            const input2 = document.getElementById('editInput2').value.trim();
            const caseSensitive = document.querySelector('input[name="editCaseSensitive"]:checked').value === 'true';

            if (!input1 || !input2) {
                alert('Both inputs are required');
                return;
            }

            try {
                const res = await apiPut(`/api/v1/histories/${id}`, { input1, input2, caseSensitive });

                if (!res.success) {
                    throw new Error(res.message || 'Failed to update history');
                }

                closeEditModal();
                refreshHistory();
            } catch (err) {
                console.error(err);
                alert('Error updating history');
            }
        }

        async function deleteHistory(id) {
            if (!confirm('Are you sure you want to delete this record?')) return;

            try {
                const res = await apiDelete(`/api/v1/histories/${id}`);

                if (!res.success) {
                    alert(res.message || 'Failed to delete history');
                }

                refreshHistory();
            } catch (err) {
                console.error(err);
                alert('Error deleting history');
            }
        }

        async function loadHistory(page = 1) {
            const historyList = document.getElementById('historyList');
            const paginationControls = document.getElementById('paginationControls');
            historyList.innerHTML = `<div class="text-center py-4 text-gray-500 text-sm">Loading...</div>`;

            try {
                // Ambil data pakai helper apiGet (otomatis decrypt kalau SECURE = true)
                const { data, pagination } = await apiGet(`/api/v1/histories?page=${page}&limit=${limit}`);

                if (!data || data.length === 0) {
                    historyList.innerHTML = `
                        <div class="text-center py-8">
                            <svg class="w-12 h-12 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                            </svg>
                            <p class="text-gray-500 text-sm">No match history yet</p>
                            <p class="text-gray-400 text-xs mt-1">Start calculating to see results here</p>
                        </div>
                    `;
                    paginationControls.classList.add('hidden');
                    return;
                }

                // Render list
                historyList.innerHTML = data.map(history => `
                    <div class="bg-gray-50 rounded-lg p-4 border">
                        <div class="flex items-center justify-between mb-2">
                            <span class="text-sm font-medium text-gray-800 ${history.caseSensitive ? 'text-orange-600' : 'text-green-600'}">
                                ${history.caseSensitive ? 'Case-Sensitive' : 'Case-Insensitive'}
                            </span>
                            <span class="text-xs text-gray-500">
                                ${new Date(history.createdAt).toLocaleDateString()}
                            </span>
                        </div>
                        <div class="text-sm text-gray-600 mb-2">
                            <p class="line-clamp-5"><strong>Input 1:</strong> "${escapeHTML(history.input1)}"</p>
                            <p class="line-clamp-5"><strong>Input 2:</strong> "${escapeHTML(history.input2)}"</p>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-lg font-bold text-purple-600">${history.percentage.toFixed(3)}%</span>
                            <span class="text-xs text-gray-500">${history.matchedChars || '-'} / ${history.totalChars || '-'}</span>
                        </div>
                        <div class="flex items-center justify-end gap-2 mt-2">
                            <button onclick="openEditModal(${history.id}, '${escapeHTML(history.input1)}', '${escapeHTML(history.input2)}', ${history.caseSensitive})" 
                                class="text-blue-600 hover:text-blue-800 text-xs">Edit</button>
                            <button onclick="deleteHistory(${history.id})" 
                                class="text-red-600 hover:text-red-800 text-xs">Delete</button>
                        </div>
                    </div>
                `).join('');

                // Update pagination
                currentPage = pagination.page;
                totalPages = pagination.totalPages;
                document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${totalPages}`;
                document.getElementById('prevPage').disabled = currentPage <= 1;
                document.getElementById('nextPage').disabled = currentPage >= totalPages;
                paginationControls.classList.remove('hidden');

            } catch (error) {
                console.error('Error loading history:', error);
                historyList.innerHTML = `<div class="text-center py-4 text-red-500 text-sm">Failed to load history</div>`;
            }
        }

        // Event listener pagination
        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 1) loadHistory(currentPage - 1);
        });
        document.getElementById('nextPage').addEventListener('click', () => {
            if (currentPage < totalPages) loadHistory(currentPage + 1);
        });

        // Refresh & initial load
        async function refreshHistory() {
            await loadHistory(currentPage);
        }

        // Load saat pertama kali
        loadHistory();
    </script>
</body>
</html>